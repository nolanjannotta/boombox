<svg
    id="svg"
  viewBox="0 0 1200 500"
  width="1200"
  height="500"
  xmlns="http://www.w3.org/2000/svg"
  xmlns:xlink="http://www.w3.org/1999/xlink"
    onload="onLoad()"
>


<filter id="displacementFilter">
    <feTurbulence
    id="turbulence"
      type="turbulence"
      seed="1"
      baseFrequency="0.002"
      numOctaves="40"
      result="turbulence" />
    <feDisplacementMap
      in2="turbulence"
      in="SourceGraphic"
      scale="20"
      xChannelSelector="R"
      yChannelSelector="G" />
  </filter>


<style>
            @font-face{
                font-family:"W95FA";
                src:url(data:application/font-woff;charset=utf-8;base64,) 
                format("woff"); 
            }

            
    </style>





<g id="songs"></g>

<!-- style="filter: url(#displacementFilter)" -->
<g id="wrapper" > 

<!-- main background -->
<rect  width="1200" height="500" fill="#f5ebe0" stroke="black" stroke-width="3" onclick="initialize()"></rect>

<!-- speaker stuff -->
<circle cx="160" cy="200" r="120" stroke="black" fill="transparent" ></circle> 
<circle cx="1040" cy="200" r="120" stroke="black" fill="transparent" ></circle> 

<rect x="10" y="40" height="450" width="300" rx="7" fill="transparent" stroke="black"></rect>
<rect x="890" y="40" height="450" width="300" rx="7" fill="transparent" stroke="black"></rect>
<!-- end of speaker stuff -->


<!-- song index, title and artist stuff -->
<text id="counter" x="600" y="50" font-size="20" font-family="W95FA" text-anchor="middle"></text>
<text id="title" x="600" y="100" font-size="35" font-family="W95FA" text-anchor="middle"></text>
<text id="artist" x="600" y="150" font-size="23" font-family="W95FA" text-anchor="middle"> </text>
<!-- end of song index, title and artist stuff -->



<!-- logo stuff -->
<text font-size="30" font-family="W95FA" x="10" y="30" >BoomBox </text>
<text font-size="18" font-family="W95FA" x="125" y="30" >by boom for boomBox with Box by BoomBox for Boom</text>
<!-- end of logo stuff -->



<text id="progress" x="600" y="180" font-size="15" font-family="W95FA" text-anchor="middle">.......................................................................................................................................</text>

<g id="analyser">
    <polyline xmlns="http://www.w3.org/2000/svg" points="375,300 825,300" stroke="black" fill="transparent"/>
</g>




<!-- controls -->
<g stroke="black" fill="transparent" stroke-width="1">
    <text x="490" y="246" font-size="40" text-anchor="middle">⏮</text>
    <text x="600" y="246" font-size="40" text-anchor="middle">⏯︎</text>
    <text x="715" y="246" font-size="40" text-anchor="middle">⏭</text>

    <rect x="465" y="220" width="50" height="30" onclick="boomBox.back()"></rect>
    <rect x="565" y="220" width="70" height="30" onclick="boomBox.playPause()"></rect>
    <rect x="690" y="220" width="50" height="30" onclick="boomBox.next()"></rect>
</g>

<!-- end of controls -->



<!-- reverb knobs stuff -->
<rect id="reverbBox" x="390" y="415" stroke="black" fill="transparent" width="120" height="80" rx="5"></rect>
<text x="450" y="430" font-size="15" font-family="W95FA" text-anchor="middle">reverb</text>

<!-- <text id="dryValue" x="420" y="445" font-size="12" font-family="W95FA" text-anchor="middle">1.00</text>
<text id="wetValue" x="480" y="445" font-size="12" font-family="W95FA" text-anchor="middle">1.00</text>




<text x="420" y="490" font-size="10" font-family="W95FA" text-anchor="middle">dry</text>
<text x="480" y="490" font-size="10" font-family="W95FA" text-anchor="middle">wet</text> -->

<!-- <g id="reverbDryGroup" onmousedown="boomBox.nodeList[0].knobOnDry()" onmouseup="boomBox.nodeList[0].knobOff()">
<line id="reverbDry" transform="rotate(0,420,465)" x1="420" x2="420" y1="465" y2="452" stroke="black" stroke-linecap="round" stroke-width="4" onmousedown="turnKnobOn()"></line>
<circle cx="420" cy="465" r="15" stroke="black" fill="transparent" onmouseout="nodeList[0].knobOff()"></circle>
</g> -->

<!-- <g id="reverbWetGroup" onmousedown="boomBox.nodeList[0].knobOnWet()" onmouseup="boomBox.nodeList[0].knobOff()">
<line id="reverbWet" transform="rotate(0,480,465)" x1="480" x2="480" y1="465" y2="452" stroke="black" stroke-linecap="round" stroke-width="4" onmousedown="turnKnobOn()"></line>
<circle cx="480" cy="465" r="15" stroke="black" fill="transparent" onmouseout="boomBox.nodeList[0].knobOff()"></circle>
</g> -->

<g id="reverbWetGroup" onmousedown="boomBox.nodeList[0].knobOnWet()" onmouseup="boomBox.nodeList[0].knobOff()">
    <line id="reverbWet" transform="rotate(0,450,470)" x1="450" x2="450" y1="470" y2="452" stroke="black" stroke-linecap="round" stroke-width="4" ></line>
    <circle cx="450" onmouseout="boomBox.nodeList[0].knobOff()" cy="470" r="20" stroke="black" fill="transparent"></circle>
</g>

<text id="wetValue" x="450" y="445" font-size="12" font-family="W95FA" text-anchor="middle">1.00</text>



<rect id="reverbBypass" onclick="boomBox.nodeList[0].bypass()" x="495" y="420" rx="2" fill="transparent" stroke="black" width="10" height="7"></rect>

<!-- _____________________________end of reverb knob stuff_________________________________________ -->



<!-- speed knob stuff -->
    <rect  x="540" y="415" fill="transparent" stroke="black" width="120" height="80" rx="5" ></rect>

<g id="speedGroup" onmousedown="boomBox.auxilary[0].knobOn()" onmouseup="boomBox.auxilary[0].knobOff()">
    <line id="speedKnob" transform="rotate(0,600,470)" x1="600" x2="600" y1="470" y2="452" stroke="black" stroke-linecap="round" stroke-width="4" ></line>
    <circle cx="600" onmouseout="boomBox.auxilary[0].knobOff()" cy="470" r="20" stroke="black" fill="transparent"></circle>
</g>
<rect onclick="boomBox.auxilary[0].preservePitch()"  id="preservePitch" x="555" y="435" rx="2" fill="transparent" stroke="black" width="10" height="7"></rect>

<text x="560" y="450" font-size="8" font-family="W95FA" text-anchor="middle">preserve</text>
<text x="560" y="457" font-size="8" font-family="W95FA" text-anchor="middle">pitch</text>
<text x="600" y="430"  font-size="15" font-family="W95FA" text-anchor="middle">speed</text>
<text id="speedValue" x="600" y="445" font-size="12" font-family="W95FA" text-anchor="middle">1.00</text>

<!-- ____________________________________end of speed knob stuff________________________________________________ -->


<!-- __________________________________________ gain knob stuff _____________________________________________________ -->

<rect id="gainBox" x="690" y="415" stroke="black" width="120" fill="transparent" height="80" rx="5"></rect>

<g id="gainGroup" onmousedown="boomBox.nodeList[1].knobOn()" onmouseup="boomBox.nodeList[1].knobOff()">
    <line id="gainKnob" transform="rotate(0,750,470)" x1="750" x2="750" y1="470" y2="452" stroke="black" stroke-linecap="round" stroke-width="4"></line>
    <circle id="gainCircle" onmouseout="boomBox.nodeList[1].knobOff()" cx="750" cy="470" r="20" stroke="black" fill="transparent"></circle>
</g> 
    
<text x="750" y="430" font-size="15" font-family="W95FA" text-anchor="middle">gain</text>
<text id="gainValue" x="750" y="445" font-size="12" font-family="W95FA" text-anchor="middle">1.00</text>

<rect onclick="boomBox.nodeList[1].bypass()"  id="gainBypass" x="795" y="420" rx="2" fill="transparent" stroke="black" width="10" height="7"></rect>


<!-- ____________________________________end of gain knob stuff________________________________________________ -->





    


</g>


    <script xmlns="http://www.w3.org/2000/svg" type="text/javascript">
        <![CDATA[

    function createBoomBox(uris, titles, artists) {
        const boomBox = {};

        boomBox.uris = uris;
        boomBox.titles = titles;
        boomBox.artists = artists;
        boomBox.gateWay = "https://arweave.net/";
        boomBox.order = [];
        boomBox.currentIndex = 0;
        boomBox.progress = document.getElementById("progress");
        boomBox.songGroup = document.getElementById("songs");
        boomBox.counter = document.getElementById("counter");
        boomBox.title = document.getElementById("title");
        boomBox.artist = document.getElementById("artist");
        boomBox.updaters = [];
        boomBox.displayUpdaters = [];
        boomBox.connectionUpdaters = [];
        boomBox.nodeFactories = [];
        boomBox.auxilaryFactory = [];
        boomBox.nodeList = [];
        boomBox.auxilary = [];
        boomBox.songSources = [];
        boomBox.connectedNodes = [];
        boomBox.context;



    boomBox.getLosslessAudio = async function(uri) {
        const response = await fetch(boomBox.gateWay + uri.slice(5));
        const json = await response.json();
        return json.losslessAudio.slice(5);
    }

    boomBox.getAudioBuffer = async function(uri) {
        let response = await fetch(boomBox.gateWay + uri, {
            mode: "cors"
        });
        let arrayBuffer = await response.arrayBuffer();
        let buffer = await boomBox.context.decodeAudioData(arrayBuffer);
        return buffer
    }

    boomBox.shuffleArray = function(array) {
        for (let i = array.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [array[i], array[j]] = [array[j], array[i]];
        }
    }

    boomBox.getCurrentSong = function() {
        return boomBox.songGroup.children[boomBox.currentIndex]
    }
    boomBox.updateAll = function() {
        boomBox.updaters.forEach((updater) => {
            updater()
        })
    }

    boomBox.playPause = function() {
        if (boomBox.context.state === "suspended") {
            boomBox.context.resume();
        }
        let song = boomBox.getCurrentSong();
        if (song.paused) {
            song.volume = 1
            song.play();

        } else {
            song.pause();
        }

    }


    boomBox.getAngle = function(originX, originY, clientX, clientY) {

        let angle = Math.atan((originX - clientX) / (originY - clientY))

        angle = angle * (180 / Math.PI)

        if (clientY > originY) {
            angle < 0 ? angle += 180 : angle -= 180

        }
        return angle;

    }


    boomBox.updateDisplay = function() {
        boomBox.displayUpdaters.forEach((updater) => {
            updater()
        })
        boomBox.progress.textContent = ".".repeat(135);
        boomBox.counter.textContent = `${boomBox.currentIndex + 1}/${boomBox.uris.length} `;
        boomBox.title.textContent = boomBox.titles[boomBox.order[boomBox.currentIndex]];
        boomBox.artist.textContent = boomBox.artists[boomBox.order[boomBox.currentIndex]];
    }

    boomBox.back = function() {

        let song = boomBox.getCurrentSong();
        song.currentTime = 0;

        if (song.currentTime < 1) {
            song.pause();
            boomBox.currentIndex--;
            //getCurrentSong().play();
        }

        updateDisplay();

    }

    boomBox.next = function() {
        let song = boomBox.getCurrentSong();
        if (boomBox.currentIndex == uris.length - 1) return;
        song.pause()
        song.currentTime = 0;

        boomBox.currentIndex++;
        boomBox.updateDisplay()

    }

    boomBox.reset = function() {
        boomBox.disconnectNodes();
        boomBox.connectNodes();
        boomBox.connectSongs()

    }

    boomBox.connectSongs = function() {
        boomBox.songSources.forEach((source) => {
            source.connect(boomBox.connectedNodes[0].input)
        })

        console.log(`all song tracks connected to ${boomBox.connectedNodes[0].name}`)

    }


    boomBox.connectNodes = function() {



        boomBox.connectedNodes = boomBox.nodeList.filter((node) => node.bypassed != true)
        boomBox.connectedNodes.push(boomBox.createDestination())
        console.log(boomBox.connectedNodes)

        for (let i = 0; i < boomBox.connectedNodes.length - 1; i++) {
            console.log(`the ${boomBox.connectedNodes[i].name} is connecting to ${boomBox.connectedNodes[i+1].name}`)

            boomBox.connectedNodes[i].connect(boomBox.connectedNodes[i + 1].input)

        }

    }

    boomBox.disconnectNodes = function() {
        boomBox.connectedNodes.forEach((node) => {
            node.disconnect && node.disconnect()
        })
        boomBox.songSources.forEach((source) => {
            source.disconnect()
        })
    }

    boomBox.onLoad = function() {
        for (let i = 0; i < uris.length; i++) {
            boomBox.order.push(i);
        }

        boomBox.shuffleArray(boomBox.order);
        boomBox.currentIndex = 0;
        boomBox.updateDisplay();
    }




    boomBox.init = async function() {

        boomBox.context = new AudioContext();
        boomBox.nodeFactories.forEach((getter, index) => {
            let node = getter(boomBox.context);

            if (node.getTimeBasedUpdaters) {
                boomBox.updaters = boomBox.updaters.concat(node.getTimeBasedUpdaters())
            }

            if (node.getDisplayUpdater) {
                boomBox.displayUpdaters = boomBox.displayUpdaters.concat(node.getDisplayUpdater())
            }

            boomBox.nodeList.push(node);

        })


        boomBox.auxilaryFactory.forEach((getter, index) => {
            let node = getter(boomBox.context);
            boomBox.auxilary.push(node);

        })

        for await (index of boomBox.order) {
            let uri = uris[index];
            let losslessAudio = await boomBox.getLosslessAudio(uri);

            let song = new Audio(boomBox.gateWay + losslessAudio)
            song.setAttribute("type", "audio/wav")
            song.setAttribute("crossorigin", "anonymous")
            song.preservesPitch = false;
            song.currentTime = 0;
            song.ontimeupdate = boomBox.updateAll;
            boomBox.songGroup.appendChild(song);
            boomBox.songSources[index] = boomBox.context.createMediaElementSource(song);
            //boomBox.songSources[index].connect(nodeList[0].input)


        }

        boomBox.connectNodes()
        boomBox.connectSongs()
    }



    boomBox.createDestination = function() {
        let destinationObject = {}

        destinationObject.input = boomBox.context.destination
        destinationObject.name = "destination"

        return destinationObject
    }


    function updateProgress() {
        let progressIndex;
        let song = boomBox.getCurrentSong();
        let percent = (song.currentTime / song.duration);
        let newString = boomBox.progress.textContent;

        progressIndex = Math.floor((newString.length) * percent)

        //or this way
        //newString = (progressIndex > 0) ? newString.substring(0,progressIndex - 1) + ".|" + newString.substring(progressIndex+1) : "|" + newString.substring(progressIndex+1)

        newString = (progressIndex > 0) ? newString.substring(0, progressIndex) + "|" + newString.substring(progressIndex + 1) : "|" + newString.substring(progressIndex + 1)
        boomBox.progress.textContent = newString;
    }



    boomBox.updaters.push(updateProgress);

    return boomBox;

}




//this is the data we get from the blockchain:
const uris = ["ar://eBud6yxw-0SZa4hgOOZnuasGODRFUBQ85EcQfAjuZDM/4", "ar://moOL48oQrlxBV6Cn1R3RJhoctjlvXMOQsSRH2J9VjQs/2", "ar://3DMAtcXBE5ZHygp_aH_zfoSMPqAYEqA3TgMB5v-DIHQ/6", "ar://lPtK7w7CKheFDJgdbS5lrT1teXq_MLpRew_1stTroTg/4"];
const titles = ["NORMAL AGAIN", "ominous vibes", "MOLLIFY", "OTHERSIDE"];
const artists = ["oshi", "oshi", "OSHI", "OSHI"];

const boomBox = createBoomBox(uris, titles, artists)
    

    
]]>
    </script>


<script xmlns="http://www.w3.org/2000/svg" type="text/javascript">

<![CDATA[


function createSpeed() {

    let speedObject = {}
    speedObject.getAngle = boomBox.getAngle;
    speedObject.speedModuleCenterX = 600;
    speedObject.speedModuleCenterY = 470;
    speedObject.song = boomBox.getCurrentSong();
    speedObject.type = "auxilary";
    speedObject.speedGroup = document.getElementById("speedGroup");
    speedObject.speedValue = document.getElementById("speedValue")
    speedObject.speedKnob = document.getElementById("speedKnob")


    speedObject.knobOn = function() {
        speedObject.speedGroup.onmousemove = speedObject.updateSpeed

    }
    speedObject.knobOff = function() {
        speedObject.speedGroup.onmousemove = null

    }

    speedObject.updateSpeed = function(event) {
        let song = boomBox.getCurrentSong();

        let angle = speedObject.getAngle(speedObject.speedModuleCenterX, speedObject.speedModuleCenterY, event.clientX, event.clientY) * -1

        let value = Math.abs(angle / 150)

        value = angle > 0 ? value + 1 : 1 - value
        if (value > 2) {
            return
        }

        song.playbackRate = value.toFixed(2)

        speedObject.speedKnob.setAttribute("transform", `rotate(${angle}, ${speedObject.speedModuleCenterX} ${speedObject.speedModuleCenterY})`)
        speedObject.speedValue.textContent = `${value.toFixed(2)}`
    }



    speedObject.preservePitch = function() {
        let song = boomBox.getCurrentSong();
        song.preservesPitch = !song.preservesPitch;
        song.preservesPitch ? document.getElementById("preservePitch").setAttribute("fill", "grey") :
            document.getElementById("preservePitch").setAttribute("fill", "transparent")
    }



    return speedObject
}



boomBox.auxilaryFactory.push(createSpeed)
 
 ]]>
</script>




<!-- reverb 

we split the audio basically creating a bus to put reverb on, then we can mix

-->

<script xmlns="http://www.w3.org/2000/svg" type="text/javascript">

<![CDATA[

function createReverb(context) {

    let reverbObject = {};



    reverbObject.reverbSplitter = context.createChannelSplitter(2);
    reverbObject.reverbMerger = context.createChannelMerger(2);
    reverbObject.convolverGain = context.createGain();
    reverbObject.input = context.createGain();
    reverbObject.convolver = context.createConvolver();


    reverbObject.input.connect(reverbObject.convolverGain)
    
    reverbObject.convolverGain.connect(reverbObject.convolver);
    // connecting directly to outout, kind of like a bus
    reverbObject.convolver.connect(context.destination);


    reverbObject.connect = function(inputNode) {
        reverbObject.input.connect(inputNode)
    }
    reverbObject.disconnect = function() {
        reverbObject.input.disconnect()

    }







    
    reverbObject.getAngle = boomBox.getAngle;

    reverbObject.reverbModuleCenterX = 450;
    reverbObject.reverbModuleCenterY = 470;
    reverbObject.name = "reverb"
    reverbObject.bypassed = false;

    reverbObject.reverbWetGroup = document.getElementById("reverbWetGroup")
    reverbObject.reverbDryGroup = document.getElementById("reverbDryGroup")

    reverbObject.box = document.getElementById("reverbBox")
    reverbObject.bypassButton = document.getElementById("reverbBypass")


    reverbObject.bypass = function() {
        reverbObject.bypassed = !reverbObject.bypassed;
        boomBox.reset();
        if (reverbObject.bypassed) {

            reverbObject.box.setAttribute("fill", "black")
            reverbObject.box.setAttribute("opacity", ".5")
            //reverbObject.bypassButton.setAttribute("fill","black")


        } else {
            reverbObject.box.setAttribute("fill", "transparent")
            reverbObject.box.setAttribute("opacity", "1")
            
        }
        
        reverbObject.input.connect(reverbObject.convolverGain)
    
        reverbObject.convolverGain.connect(reverbObject.convolver);
        // connecting directly to outout, kind of like a bus
        reverbObject.convolver.connect(context.destination);
        

    }


    reverbObject.knobOnDry = function() {
        //reverbObject.reverbDryGroup.onmousemove = reverbObject.updateDry

    }
    reverbObject.knobOnWet = function() {
        reverbObject.reverbWetGroup.onmousemove = reverbObject.updateWet

    }
    reverbObject.knobOff = function() {
        //reverbObject.reverbDryGroup.onmousemove = null
        reverbObject.reverbWetGroup.onmousemove = null

    }



    boomBox.getAudioBuffer("7iekDbhAAB3wW-pXwwsMuBnzU_cFztJkpMVcOjQFs74").then(
        (reverbBuffer) => {
            reverbObject.convolver.buffer = reverbBuffer
        });


    

    reverbObject.updateWet = function(event) {

        let angle = reverbObject.getAngle(reverbObject.reverbModuleCenterX, reverbObject.reverbModuleCenterY, event.clientX, event.clientY) * -1
        let value = Math.abs(angle / 150)

        value = angle > 0 ? value + 1 : 1 - value
        //value *= value

        if (value > 4 || value < 0.0001) {
            return
        }

        reverbObject.convolverGain.gain.setTargetAtTime(value, context.currentTime, 0.015);

        document.getElementById("reverbWet").setAttribute("transform", `rotate(${angle}, ${reverbObject.reverbModuleCenterX} ${reverbObject.reverbModuleCenterY})`)
        document.getElementById("wetValue").textContent = `${reverbObject.convolverGain.gain.value.toFixed(2)}`

    }




    return reverbObject;



}




boomBox.nodeFactories.push(createReverb)


]]>
</script>

<!-- gain -->
<script xmlns="http://www.w3.org/2000/svg" type="text/javascript">

<![CDATA[



function createGainNode(context) {
    let gainObject = {}


    let gainNode = context.createGain()


    gainObject.name = "gainNode";
    gainObject.bypassed = false;
    gainObject.input = gainNode;
    gainObject.gainGroup = document.getElementById("gainGroup");
    gainObject.box = document.getElementById("gainBox");
    gainObject.bypassButton = document.getElementById("gainBypass");


    gainObject.knobOn = function() {
        gainObject.gainGroup.onmousemove = gainObject.update

    }
    gainObject.knobOff = function() {
        gainObject.gainGroup.onmousemove = null

    }


    gainObject.gainModuleCenterX = 750;
    gainObject.gainModuleCenterY = 470;
    gainObject.getAngle = boomBox.getAngle;

    gainObject.bypass = function() {
        gainObject.bypassed = !gainObject.bypassed;
        if (gainObject.bypassed) {

            gainObject.box.setAttribute("fill", "black")
            gainObject.box.setAttribute("opacity", ".5")

            //gainObject.bypassButton.setAttribute("fill","black")


        } else {
            gainObject.box.setAttribute("fill", "transparent")
            gainObject.box.setAttribute("opacity", "1")
            //gainObject.bypassButton.setAttribute("fill","transparent")
        }

        boomBox.reset();
    }

    gainObject.update = function(event) {

        let angle = gainObject.getAngle(gainObject.gainModuleCenterX, gainObject.gainModuleCenterY, event.clientX, event.clientY) * -1
        let value = Math.abs(angle / 150)

        value = angle > 0 ? value + 1 : 1 - value
        value *= value

        if (value > 4 || value < 0.01) {
            return
        }
        gainObject.input.gain.setTargetAtTime(value, context.currentTime, 0.015);

        document.getElementById("gainKnob").setAttribute("transform", `rotate(${angle}, ${gainObject.gainModuleCenterX} ${gainObject.gainModuleCenterY})`)
        document.getElementById("gainValue").textContent = `${value.toFixed(2)}`
    }

    gainObject.connect = function(inputNode) {
        gainObject.input.connect(inputNode)
    }
    gainObject.disconnect = function(inputNode) {
        gainObject.input.disconnect(inputNode)
    }




    return gainObject;
}


boomBox.nodeFactories.push(createGainNode)

]]>
</script>


<script xmlns="http://www.w3.org/2000/svg" type="text/javascript">

<![CDATA[

function createAnalyser(context) {


    let analyserObject = {};
    let analyser = context.createAnalyser();
    analyser.fftSize = 512;
    analyser.smoothingTimeConstant = 0.05;

    //build the object:
    analyserObject.name = "analyser"
    analyserObject.input = analyser;
    analyserObject.analyserGroup = document.getElementById("analyser");
    analyserObject.analyserArray = new Float32Array(256);
    analyserObject.bypassed = false;

    analyserObject.updateAnalyser = function() {
        analyserObject.input.getFloatFrequencyData(analyserObject.analyserArray);

        let points = "";
        for (let i = 0; i < 256; i++) {
            let y2 = analyserObject.analyserArray[i] / 255
            //console.log(y2)
            //analyserGroup.children[i].setAttribute("y2", 300 - (y2*100))
            points = points + `${375 + (1.75*i)},${Math.floor(300 - (y2*100))} `

        }
        analyserObject.analyserGroup.children[0].setAttribute("points", points)

    }
    analyserObject.distort = function() {
        let max = Math.max.apply(Math, analyserObject.analyserArray);

        if (max > -10) {
            //console.log(Math.abs(max) % 3)
            document.getElementById("turbulence").setAttribute("baseFrequency", (Math.abs(max) % 2) / 1000)
            document.getElementById("turbulence").setAttribute("seed", Math.abs(max))
            document.getElementById("wrapper").setAttribute("style", "filter: url(#displacementFilter)")
        } else {
            document.getElementById("wrapper").setAttribute("style", "")
        }
    }

    analyserObject.resetAnalyser = function() {
        analyserObject.analyserGroup.children[0].setAttribute("points", "375,320 825,320")

    }
    analyserObject.disconnect = function(inputNode) {
        analyserObject.input.disconnect(inputNode)
    }
    analyserObject.connect = function(inputNode) {
        analyserObject.input.connect(inputNode)
    }

    analyserObject.getTimeBasedUpdaters = function() {
        return [analyserObject.updateAnalyser, analyserObject.distort]
    }

    analyserObject.getDisplayUpdater = function() {
        return [analyserObject.resetAnalyser]
    }


    return analyserObject;


}



boomBox.nodeFactories.push(createAnalyser)


]]>
</script>





    <!-- this script will take all the effects created above and join them to the context -->
<script xmlns="http://www.w3.org/2000/svg" type="text/javascript">

<![CDATA[


function onLoad() {
    boomBox.onLoad();

}


async function initialize() {
    if (boomBox.context && boomBox.context.state == "running") return;
    await boomBox.init()

}

    

]]>
</script>

</svg>


