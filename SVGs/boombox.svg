<svg
  viewBox="0 0 1200 500"
  width="100%"
  height="100%"
  xmlns="http://www.w3.org/2000/svg"
  xmlns:xlink="http://www.w3.org/1999/xlink"
  onload="initialize()"

>

<style>
            @font-face{
                font-family:"W95FA";
                src:url(data:application/font-woff;charset=utf-8;base64,) 
                format("woff"); 
            }

            
    </style>





<g id="songs">

</g>
<rect width="1200" height="500" fill="#f5ebe0" stroke="black" stroke-width="3"></rect>

<text id="counter" x="600" y="50" font-size="20" font-family="W95FA" text-anchor="middle"></text>
<text id="title" x="600" y="100" font-size="35" font-family="W95FA" text-anchor="middle"></text>
<text id="artist" x="600" y="150" font-size="23" font-family="W95FA" text-anchor="middle"> </text>

<text font-size="30" font-family="W95FA" x="10" y="30" >BoomBox </text>
<text font-size="18" font-family="W95FA" x="125" y="30" >by boom for boomBox with Box by BoomBox for Boom</text>


<text x="490" y="246" font-size="40" text-anchor="middle">⏮</text>
<!-- <text x="460" y="226" font-size="40" text-anchor="middle">⏵</text> -->
<!-- <text x="540" y="225" font-size="40" text-anchor="middle">⏸</text> -->
<text x="600" y="246" font-size="40" text-anchor="middle">⏯︎</text>
<text x="715" y="246" font-size="40" text-anchor="middle">⏭</text>

<text id="progress" x="600" y="180" font-size="15" font-family="W95FA" text-anchor="middle">.......................................................................................................................................</text>


<text id="analyzer" x="600" y="320" font-size="15" font-family="W95FA" text-anchor="middle">...................................................................................................</text>
<text x="600" y="335" font-size="15" font-family="W95FA" text-anchor="middle">analyzer</text>


<text x="450" y="430" font-size="15" font-family="W95FA" text-anchor="middle">reverb</text>
<text x="600" y="430" font-size="15" font-family="W95FA" text-anchor="middle">pitch/speed</text>
<text x="750" y="430" font-size="15" font-family="W95FA" text-anchor="middle">gain</text>

<text x="420" y="445" font-size="12" font-family="W95FA" text-anchor="middle">2.5</text>
<text x="480" y="445" font-size="12" font-family="W95FA" text-anchor="middle">9.5</text>


<text x="600" y="445" font-size="12" font-family="W95FA" text-anchor="middle">7.5</text>
<text x="750" y="445" font-size="12" font-family="W95FA" text-anchor="middle">0.3</text>


<text x="420" y="490" font-size="10" font-family="W95FA" text-anchor="middle">dry</text>
<text x="480" y="490" font-size="10" font-family="W95FA" text-anchor="middle">wet</text>


<g fill="transparent" stroke="black" stroke-width="1">
<rect x="465" y="220" width="50" height="30" onclick="back()"></rect>
<!-- <rect x="435" y="199" width="50" height="30" onclick="playSong()"></rect> -->
<!-- <rect x="515" y="199" width="50" height="30" onclick="pauseSong()"></rect> -->

<rect x="565" y="220" width="70" height="30" onclick="playPause()"></rect>
<rect x="690" y="220" width="50" height="30" onclick="next()"></rect>

<!-- <rect x="595" y="199" width="50" height="30" onclick="next()"></rect> -->


<!-- these are the rectangles at the botton -->
<rect x="390" y="415" width="120" height="80" rx="5"></rect>
<rect x="540" y="415" width="120" height="80" rx="5"></rect>
<rect x="690" y="415" width="120" height="80" rx="5"></rect>


</g>


    <circle cx="420" cy="465" r="15" stroke="black" fill="transparent"></circle>
    <circle cx="480" cy="465" r="15" stroke="black" fill="transparent"></circle>

    <circle cx="600" cy="470" r="20" stroke="black" fill="transparent"></circle>
    <circle cx="750" cy="470" r="20" stroke="black" fill="transparent"></circle>

    <circle cx="160" cy="200" r="120" stroke="black" fill="transparent" ></circle> 
    <circle cx="1040" cy="200" r="120" stroke="black" fill="transparent" ></circle> 

    <rect x="10" y="40" height="450" width="300" rx="7" fill="transparent" stroke="black"></rect>
    <rect x="890" y="40" height="450" width="300" rx="7" fill="transparent" stroke="black"></rect>



    <script xmlns="http://www.w3.org/2000/svg" type="text/javascript">
        <![CDATA[
        
    
    const gateWay = "https://arweave.net/";
    //let currentSong;
    
    let songs = []; // array of audio elements
    let order = []; // randomized order 

    let currentIndex;


    let progress = document.getElementById("progress");
    let progressIndex;

    

    //this is the data we get from the blockchain:
    const uris = ["ar://eBud6yxw-0SZa4hgOOZnuasGODRFUBQ85EcQfAjuZDM/4","ar://moOL48oQrlxBV6Cn1R3RJhoctjlvXMOQsSRH2J9VjQs/2","ar://3DMAtcXBE5ZHygp_aH_zfoSMPqAYEqA3TgMB5v-DIHQ/6"];
    const titles = ["NORMAL AGAIN", "ominous vibes","MOLLIFY"];
    const artists = ["oshi", "oshi", "OSHI"];
    

    let context;

    
]]>
    </script>

<script xmlns="http://www.w3.org/2000/svg" type="text/javascript">

<![CDATA[

    async function getTokenURI(index) {
        const response = await fetch( gateWay + uris[index].slice(5));
        const json = await response.json();
        return json.losslessAudio.slice(5);
        


    }

    function shuffleArray(array) {
        for (let i = array.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [array[i], array[j]] = [array[j], array[i]];
            }
    
    }


    function initialize() {
        context = new AudioContext();
        for(let i=0; i<uris.length; i++) {
            order.push(i);
        }

        shuffleArray(order);
        currentIndex = 0;
        loadSong()
        updateCounter();



    }



    async function loadSong() {



        //context = new AudioContext();
        let uri = await getTokenURI(order[currentIndex]);
        let currentSong = new Audio(gateWay + uri);

        currentSong.addEventListener("timeupdate",updateProgress);
        //currentSong.setAttribute("id", "song1")
        currentSong.setAttribute("type", "audio/wav")
        currentSong.setAttribute("crossorigin", "anonymous")
        currentSong.currentTime = 0;

        document.getElementById("title").textContent = titles[order[currentIndex]]
        document.getElementById("artist").textContent = artists[order[currentIndex]]
        document.getElementById("songs").appendChild(currentSong);
        songs.push(currentSong);
        const track = context.createMediaElementSource(currentSong);
        songs[currentSong].arrayBuffer;
        
        track.connect(context.destination);

        
    }




    function updateProgress() {
        if(songs[currentIndex].paused) return;
        let percent = (songs[currentIndex].currentTime/songs[currentIndex].duration);
        let newString = progress.textContent;
        
        progressIndex = Math.floor((newString.length) * percent)

        

        //or this way
        newString = (progressIndex > 0) ? newString.substring(0,progressIndex - 1) + ".|" + newString.substring(progressIndex+1) : "|" + newString.substring(progressIndex+1)


        //newString = (progressIndex > 0) ? newString.substring(0,progressIndex) + "|" + newString.substring(progressIndex+1) : "|" + newString.substring(progressIndex+1)


        progress.textContent = newString;


    }

    function playPause() {
         if (context.state === "suspended") {
            context.resume();
        }

        if(songs[currentIndex].paused) {
            songs[currentIndex].play();
            
        }
        else {

            songs[currentIndex].pause();

        }

    }

    function clearProgress() {
        progress.textContent = ".".repeat(135);
    }
    function updateCounter() {
        document.getElementById("counter").textContent = `${currentIndex + 1}/${uris.length} `
    }

    function back() {
        if(songs[currentIndex].currentTime == 0) {
            currentIndex --;
            loadSong(order[currentIndex]) 
        }
        

        songs[currentIndex].currentTime = 0;
        clearProgress();
        updateCounter();
    }

    function next() {
        songs[currentIndex].currentTime = 0;
        songs[currentIndex].pause()
        
        loadSong(order[currentIndex])
        updateCounter();
        currentIndex ++;
    }

 ]]>
</script>

<!-- <script>
<![CDATA[
    async function createReverb() {
        let convolver = audioCtx.createConvolver();

        // load impulse response from file
        let response = await fetch("path/to/impulse-response.wav");
        let arraybuffer = await response.arrayBuffer();
        convolver.buffer = await audioCtx.decodeAudioData(arraybuffer);

  return convolver;
}
    

]]>
</script> -->

    <!-- this script will take all the effects created above and join them to the context -->
<script xmlns="http://www.w3.org/2000/svg" type="text/javascript">

<![CDATA[

    

]]>
</script>

</svg>